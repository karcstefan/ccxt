# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange


class litebit(Exchange):

    def describe(self):
        return self.deep_extend(super(litebit, self).describe(), {
            'id': 'litebit',
            'name': 'Litbit.nl',
            'countries': ['NL'],
            'has': {
                'fetchMarkets': True,
                'fetchCurrencies': True,
                'fetchTradingLimits': False,
                'fetchTradingFees': False,
                'fetchFundingLimits': False,
                'fetchTicker': True,
                'fetchOrderBook': True,
                'fetchTrades': False,
                'fetchOHLCV': False,
                'fetchBalance': True,
                'cancelOrder': True,
                'createOrder': True,
                'editOrder': False,
                'fetchOrder': True,
                'fetchOrders': True,
                'fetchOpenOrders': True,
                'fetchMyTrades': True,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchWithdrawals': False,
                'fetchTransactions': False,
                'fetchLedger': False,
                'withdraw': False,
                'transfer': False,
            },
            'version': 'v1',
            'urls': {
                'logo': '',
                'api': 'https://localhost/api',
                'www': 'https://localhost/',
            },
            'api': {
                'public': {
                    'get': [
                        'trade-market',
                        'trade-market/{code}/book',
                        'trade-market/{code}/history',
                        'currency',
                    ],
                },
                'private': {
                    'get': [
                        'balance',
                        'trade-order',
                        'trade-order/{uuid}',
                    ],
                    'post': [
                        'trade-order',
                    ],
                    'delete': [
                        'trade-order/{uuid}',
                    ],
                },
            },
        })

    def fetch_markets(self, params={}):
        markets = self.publicGetTradeMarket(params)
        results = []
        for i in range(0, len(markets.data)):
            marketData = markets.data[i]
            results.append({
                'id': marketData.code,
                'symbol': marketData.code,
                'active': marketData.is_active,
                'base': marketData.base_currency.data.code,
                'baseId': marketData.base_currency.data.code.lower(),
                'quote': marketData.quote_currency.data.code,
                'quoteId': marketData.quote_currency.data.code.lower(),
                'precision': {
                    'price': marketData.decimals,
                    'cost': marketData.decimals,
                    'amount': marketData.decimals,
                },
                # TODO: Missing limits/fees
                'info': marketData,
            })
        return results

    def fetch_currencies(self, params={}):
        currencies = self.publicGetCurrency(params)
        results = []
        for i in range(0, len(currencies.data)):
            currencyData = currencies.data[i]
            results.append({
                'id': currencyData.code.lower(),
                'code': currencyData.code,
                'name': currencyData.name,
                'active': True,
                'precision': currencyData.decimals,
                # TODO: missing limits/fee
                'info': currencyData,
            })
        return results

    def fetch_order_book(self, symbol, limit, params={}):
        request = {'code': symbol}
        if limit is not None:
            request.limit = limit
        orderBook = self.publicGetTradeMarketCodeBook(request)
        results = []
        for i in range(0, len(orderBook.data)):
            orderBookData = orderBook.data[i]
            results.append({
                'buy': orderBookData.buy,
                'ask': orderBookData.sell,
                'timestamp': orderBookData.timestamp,
                'nonce': None,
            })
        return results

    def fetch_ticker(self, symbol, params={}):
        self.load_markets()
        return self.fetch_tickers([symbol], params)

    def fetch_tickers(self, symbols=None, params={}):
        self.load_markets()
        data = []
        for i in range(0, len(self.markets)):
            marketData = self.markets[i]
            if symbols is None or symbols.includes(marketData.id):
                ticker = self.publicGetTradeMarketCodeHistory({'code': marketData.id})
                for j in range(0, len(ticker.data)):
                    data.append(ticker.data[j])
        return data

    def fetch_balance(self):
        balances = self.privateGetBalance()
        free = {}
        used = {}
        total = {}
        for i in range(0, len(balances.data)):
            balanceData = balances.data[i]
            free[balanceData.available.currency] = balanceData.available.amount
            used[balanceData.reserved.currency] = balanceData.reserved.amount
            total[balanceData.total.currency] = balanceData.total.amount
        results = {
            'info': balances.data,
            'free': free,
            'used': used,
            'total': total,
        }
        list(total).forEach((key.keys()) => {
            results[key] = {
                'free': free[key],
                'used': used[key],
                'total': total[key],
            }
        })
        return results

    def create_order(self, params={}):
        request = {
            'trade-market': params.tradeMarket,
            'amount': params.amount,
            'side': params.side,
            'rate': params.rate,
        }
        response = self.privatePostTradeOrder(self.extend(request, params))
        return {
            'info': response.data,
            'id': response.data.uuid,
        }

    def cancel_order(self, params={}):
        request = {'uuid': params.uuid}
        return self.privateDeleteTradeOrderUuid(request)

    def fetch_order(self, id, symbol=None, params={}):
        response = self.privateGetTradeOfferUuid({'uuid': id})
        return self.transform_order_data(response.data)

    def fetch_orders(self, symbol=None, since=None, limit=None, params={}):
        response = self.privateGetTradeOffer()
        output = []
        for i in range(0, len(response.data)):
            orderData = self.transform_order_data(response.data[i])
            output.append(orderData)
        return output

    def transform_order_data(self, responseData):
        return {
            'id': responseData.uuid,
            'clientOrderId': responseData.uuid,
            'datetime': responseData.created_at,
            'timestamp': int((new Date(responseData.created_at).getTime() / '{:.0f}'.format(1000))),
            'lastTradeTimestamp': int((new Date(responseData.updated_At).getTime() / '{:.0f}'.format(1000))),
            'status': responseData.status,
            'symbol': responseData.trade_market,
            'type': responseData.type,
            'timeInForce': responseData.time_in_force,
            'side': responseData.side,
            'amount': responseData.amount,
            'filled': responseData.amount_filled,
            'cost': responseData.amount_cost,
            'info': responseData,
        }

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = self.urls['api'] + '/' + self.version + '/' + self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        headers = headers or {}
        headers.Accept = 'application/json'
        if api == 'private':
            headers.Authorization = 'Bearer ' + self.apiKey
        if method == 'POST':
            body = self.json(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}
